module.exports = {
    parser: '@typescript-eslint/parser',
    parserOptions: {
        project: './tsconfig.json',
        sourceType: 'module',
    },
    plugins: ['@typescript-eslint/eslint-plugin'],
    extends: [
        'plugin:@typescript-eslint/recommended',
        "next/core-web-vitals",
    ],
    root: true,
    env: {
        node: true,
        jest: true,
    },
    rules: {
        'no-param-reassign': ['error'],
        '@typescript-eslint/type-annotation-spacing': ['error', { 'before': false, 'after': true, 'overrides': { 'arrow': { 'before': true, 'after': true } } }],
        'prefer-template': 'error',
        'no-useless-escape': 'error',
        'no-useless-concat': 'error',
        'space-before-blocks': ['error', 'always'],
        'space-before-function-paren': ['error', { 'asyncArrow': 'always', 'named': 'never', 'anonymous': 'never' }],
        'no-trailing-spaces': ['error'],
        'curly': ['error'],
        'brace-style': [2, '1tbs', { 'allowSingleLine': true }],
        'no-multiple-empty-lines': 'error',
        'space-in-parens': ['error', 'never'],
        'arrow-parens': ['error', 'always'],
        'no-multi-spaces': ['error'],
        'spaced-comment': ['error', 'always', {}],
        '@typescript-eslint/interface-name-prefix': 'off',
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-unused-vars': ['error', { varsIgnorePattern: '^_', argsIgnorePattern: '^_' }],
        'no-console': 'off',
        'keyword-spacing': 'error',
        'eqeqeq': ['error', 'always'],
        'padding-line-between-statements': [
            'error',
            { 'blankLine': 'always', 'prev': '*', 'next': 'const' },
            { 'blankLine': 'always', 'prev': 'const', 'next': '*' },
            { 'blankLine': 'any', 'prev': 'const', 'next': 'const' },

            { 'blankLine': 'always', 'prev': '*', 'next': 'let' },
            { 'blankLine': 'always', 'prev': 'let', 'next': '*' },
            { 'blankLine': 'any', 'prev': 'let', 'next': 'let' },

            { 'blankLine': 'always', 'prev': 'block-like', 'next': '*' },
            { 'blankLine': 'always', 'prev': '*', 'next': 'return' },

            { 'blankLine': 'any', 'prev': 'const', 'next': 'let' },
            { 'blankLine': 'any', 'prev': 'let', 'next': 'const' },
        ],
        'no-var': 'error',
        'comma-spacing': ['error', { 'before': false, 'after': true }],
        'no-unused-vars': ['error', { varsIgnorePattern: '^_', argsIgnorePattern: '^_' }],
        'key-spacing': ['error', { 'afterColon': true }],
        'arrow-spacing': ['error', { 'before': true, 'after': true }],
        'comma-dangle': ['error', {
            'arrays': 'always-multiline',
            'objects': 'always-multiline',
            'imports': 'always-multiline',
            'exports': 'always-multiline',
            'functions': 'always-multiline',
        }],
        'object-curly-spacing': [
            'error',
            'always',
            { 'arraysInObjects': true, 'objectsInObjects': true },
        ],
        'space-before-blocks': [
            'error',
            {
                'functions': 'always',
                'classes': 'always',
                'keywords': 'always',
            },
        ],
        'space-infix-ops': [
            'error',
            { 'int32Hint': false },
        ],
        'indent': [
            'error',
            4,
            { 'SwitchCase': 1, ignoredNodes: ['TemplateLiteral'] },
        ],
        'linebreak-style': [
            'error',
            'unix',
        ],
        'quotes': [
            'error',
            'single',
        ],
        'semi': [
            'error',
            'always',
        ],
    },
};
